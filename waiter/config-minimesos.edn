{
 ; ---------- Cluster ----------

 :waiter-principal "waiter@example.com"

 :zookeeper {:connect-string #config/env "WAITER_ZOOKEEPER_CONNECT_STRING"}

 ; ---------- Metrics - Internal ----------

 :metrics-config {
                  :codahale-reporters {
                                       :graphite {
                                                  :factory-fn waiter.reporter/graphite-reporter
                                                  :filter-regex #config/regex "^jvm.*|^waiter.*"
                                                  :host "localhost"
                                                  :period-ms 6000
                                                  :pickled? true
                                                  :prefix "waiter-internal"
                                                  :port #config/env-int "GRAPHITE_SERVER_PORT"}}}

 ; ---------- Network ----------

 ;; Set the bind address to a specific IP:
 :host "127.0.0.1"

 ;; Set the port:
 :port #config/env-int "WAITER_PORT"

 ; ---------- Security ----------

 :authenticator-config {:jwt {:http-options {:conn-timeout 10000
                                             :socket-timeout 10000
                                             :spnego-auth false}
                              :issuer "test.com"
                              :jwks-url #config/env "JWKS_SERVER_URL"
                              :oidc-authorize-uri #config/env "OIDC_AUTHORIZE_URL"
                              :oidc-token-uri #config/env "OIDC_TOKEN_URL"
                              :subject-key :sub
                              :supported-algorithms #{:eddsa :rs256}
                              :token-type "JWT"
                              :update-interval-ms 60000}
                        :kind :one-user
                        :one-user {;; The user account used to launch services:
                                   :run-as-user #config/env "WAITER_AUTH_RUN_AS_USER"}}

 ; ---------- Scheduling ----------

 :scheduler-config {
                    ;; Use Marathon for scheduling instances:
                    :kind :marathon
                    :marathon {
                               ;; The URL for your Marathon HTTP API:
                               :url #config/env "WAITER_MARATHON"
                               :mesos-slave-port 5051
                               :http-options {:conn-timeout 10000
                                              :socket-timeout 10000
                                              :spnego-auth false}

                               :marathon-descriptor-builder {:factory-fn waiter.scheduler.marathon/default-marathon-descriptor-builder}}}

 ; ---------- CORS ----------
 :cors-config {:kind :allow-all}

 ;; Require fewer failed health checks
 :health-check-config {:failed-check-threshold 2}}
